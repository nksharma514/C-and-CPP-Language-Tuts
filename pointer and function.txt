Que. what is pointers and function in c language?
Ans:   In the C programming language, pointers and functions are fundamental concepts that allow you to manipulate memory and create modular, reusable code.

1. Pointers:
A pointer is a variable that stores the memory address of another variable. It allows you to work with the memory directly and is a powerful feature in C. Here are some key aspects of pointers:
Declaration: Pointers are declared using an asterisk (*) before the variable name. 

For example:
int *ptr; // Declares a pointer to an integer

Assignment: Pointers can be assigned the address of another variable of the same data type. 
For example:
int x = 10;
int *ptr = &x; // Assigns the address of 'x' to 'ptr'

Dereferencing: You can access the value stored at the memory location pointed to by a pointer using the dereference operator (*). 
For example:
int y = *ptr; // 'y' will be assigned the value of 'x' (10)

Pointer Arithmetic: Pointers can be incremented and decremented to move through memory locations, which is especially useful for working with arrays.

example:
#include<stdio.h>
int main(){
    int x = 10;
    int *ptr = &x;
    int result = *ptr;
    printf("%d", result);
    return 0;
}
o/p 10



2. Functions:
Functions in C are blocks of code that perform a specific task. They are used for code organization, reusability, and modularity. Here are some key aspects of functions:

Declaration and Definition: A function is declared by specifying its name, return type, and parameters (if any). The function is defined elsewhere in the program. 
For example:
int add(int a, int b); // Function declaration

Function Call: To execute a function, you call it by its name and provide arguments if required. 
For example:
int result = add(5, 3); // Calling the 'add' function with arguments 5 and 3

Return Value: Functions can return a value using the return statement. 
For example:
int add(int a, int b) {
    return a + b;
}

Parameters: Functions can take parameters, which are variables that receive values when the function is called. These parameters are used within the function's body to perform operations.

Function Pointers: Like variables, functions can also have pointers. Function pointers allow you to store and call functions dynamically at runtime.

Combining pointers and functions can be powerful in C. You can use function pointers to create callbacks, create data structures like linked lists and trees, and achieve more flexible and dynamic behavior in your programs.

example:

#include<stdio.h>
int add(int a, int b){
    return a+b;
}
int main(){
    int result = add(6,5);
    printf("%d", result);
}

o/p 11
